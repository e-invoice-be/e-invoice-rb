module EInvoiceAPI
  module Models
    type document_create_from_pdf_response =
      {
        allowances: ::Array[EInvoiceAPI::Allowance]?,
        amount_due: String?,
        attachments: ::Array[EInvoiceAPI::DocumentAttachmentCreate]?,
        billing_address: String?,
        billing_address_recipient: String?,
        charges: ::Array[EInvoiceAPI::Charge]?,
        currency: EInvoiceAPI::Models::currency_code,
        customer_address: String?,
        customer_address_recipient: String?,
        customer_email: String?,
        customer_id: String?,
        customer_name: String?,
        customer_tax_id: String?,
        direction: EInvoiceAPI::Models::document_direction,
        document_type: EInvoiceAPI::Models::document_type,
        due_date: Date?,
        invoice_date: Date?,
        invoice_id: String?,
        invoice_total: String?,
        items: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::Item],
        note: String?,
        payment_details: ::Array[EInvoiceAPI::PaymentDetailCreate]?,
        payment_term: String?,
        previous_unpaid_balance: String?,
        purchase_order: String?,
        remittance_address: String?,
        remittance_address_recipient: String?,
        service_address: String?,
        service_address_recipient: String?,
        service_end_date: Date?,
        service_start_date: Date?,
        shipping_address: String?,
        shipping_address_recipient: String?,
        state: EInvoiceAPI::Models::document_state,
        subtotal: String?,
        success: bool,
        tax_code: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code,
        tax_details: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::TaxDetail]?,
        total_discount: String?,
        total_tax: String?,
        ubl_document: String?,
        vatex: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::vatex?,
        vatex_note: String?,
        vendor_address: String?,
        vendor_address_recipient: String?,
        vendor_email: String?,
        vendor_name: String?,
        vendor_tax_id: String?
      }

    class DocumentCreateFromPdfResponse < EInvoiceAPI::Internal::Type::BaseModel
      attr_accessor allowances: ::Array[EInvoiceAPI::Allowance]?

      attr_accessor amount_due: String?

      attr_accessor attachments: ::Array[EInvoiceAPI::DocumentAttachmentCreate]?

      attr_accessor billing_address: String?

      attr_accessor billing_address_recipient: String?

      attr_accessor charges: ::Array[EInvoiceAPI::Charge]?

      attr_reader currency: EInvoiceAPI::Models::currency_code?

      def currency=: (
        EInvoiceAPI::Models::currency_code
      ) -> EInvoiceAPI::Models::currency_code

      attr_accessor customer_address: String?

      attr_accessor customer_address_recipient: String?

      attr_accessor customer_email: String?

      attr_accessor customer_id: String?

      attr_accessor customer_name: String?

      attr_accessor customer_tax_id: String?

      attr_reader direction: EInvoiceAPI::Models::document_direction?

      def direction=: (
        EInvoiceAPI::Models::document_direction
      ) -> EInvoiceAPI::Models::document_direction

      attr_reader document_type: EInvoiceAPI::Models::document_type?

      def document_type=: (
        EInvoiceAPI::Models::document_type
      ) -> EInvoiceAPI::Models::document_type

      attr_accessor due_date: Date?

      attr_accessor invoice_date: Date?

      attr_accessor invoice_id: String?

      attr_accessor invoice_total: String?

      attr_reader items: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::Item]?

      def items=: (
        ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::Item]
      ) -> ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::Item]

      attr_accessor note: String?

      attr_accessor payment_details: ::Array[EInvoiceAPI::PaymentDetailCreate]?

      attr_accessor payment_term: String?

      attr_accessor previous_unpaid_balance: String?

      attr_accessor purchase_order: String?

      attr_accessor remittance_address: String?

      attr_accessor remittance_address_recipient: String?

      attr_accessor service_address: String?

      attr_accessor service_address_recipient: String?

      attr_accessor service_end_date: Date?

      attr_accessor service_start_date: Date?

      attr_accessor shipping_address: String?

      attr_accessor shipping_address_recipient: String?

      attr_reader state: EInvoiceAPI::Models::document_state?

      def state=: (
        EInvoiceAPI::Models::document_state
      ) -> EInvoiceAPI::Models::document_state

      attr_accessor subtotal: String?

      attr_reader success: bool?

      def success=: (bool) -> bool

      attr_reader tax_code: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code?

      def tax_code=: (
        EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code
      ) -> EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code

      attr_accessor tax_details: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::TaxDetail]?

      attr_accessor total_discount: String?

      attr_accessor total_tax: String?

      attr_accessor ubl_document: String?

      attr_accessor vatex: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::vatex?

      attr_accessor vatex_note: String?

      attr_accessor vendor_address: String?

      attr_accessor vendor_address_recipient: String?

      attr_accessor vendor_email: String?

      attr_accessor vendor_name: String?

      attr_accessor vendor_tax_id: String?

      def initialize: (
        ?allowances: ::Array[EInvoiceAPI::Allowance]?,
        ?amount_due: String?,
        ?attachments: ::Array[EInvoiceAPI::DocumentAttachmentCreate]?,
        ?billing_address: String?,
        ?billing_address_recipient: String?,
        ?charges: ::Array[EInvoiceAPI::Charge]?,
        ?currency: EInvoiceAPI::Models::currency_code,
        ?customer_address: String?,
        ?customer_address_recipient: String?,
        ?customer_email: String?,
        ?customer_id: String?,
        ?customer_name: String?,
        ?customer_tax_id: String?,
        ?direction: EInvoiceAPI::Models::document_direction,
        ?document_type: EInvoiceAPI::Models::document_type,
        ?due_date: Date?,
        ?invoice_date: Date?,
        ?invoice_id: String?,
        ?invoice_total: String?,
        ?items: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::Item],
        ?note: String?,
        ?payment_details: ::Array[EInvoiceAPI::PaymentDetailCreate]?,
        ?payment_term: String?,
        ?previous_unpaid_balance: String?,
        ?purchase_order: String?,
        ?remittance_address: String?,
        ?remittance_address_recipient: String?,
        ?service_address: String?,
        ?service_address_recipient: String?,
        ?service_end_date: Date?,
        ?service_start_date: Date?,
        ?shipping_address: String?,
        ?shipping_address_recipient: String?,
        ?state: EInvoiceAPI::Models::document_state,
        ?subtotal: String?,
        ?success: bool,
        ?tax_code: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code,
        ?tax_details: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::TaxDetail]?,
        ?total_discount: String?,
        ?total_tax: String?,
        ?ubl_document: String?,
        ?vatex: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::vatex?,
        ?vatex_note: String?,
        ?vendor_address: String?,
        ?vendor_address_recipient: String?,
        ?vendor_email: String?,
        ?vendor_name: String?,
        ?vendor_tax_id: String?
      ) -> void

      def to_hash: -> {
        allowances: ::Array[EInvoiceAPI::Allowance]?,
        amount_due: String?,
        attachments: ::Array[EInvoiceAPI::DocumentAttachmentCreate]?,
        billing_address: String?,
        billing_address_recipient: String?,
        charges: ::Array[EInvoiceAPI::Charge]?,
        currency: EInvoiceAPI::Models::currency_code,
        customer_address: String?,
        customer_address_recipient: String?,
        customer_email: String?,
        customer_id: String?,
        customer_name: String?,
        customer_tax_id: String?,
        direction: EInvoiceAPI::Models::document_direction,
        document_type: EInvoiceAPI::Models::document_type,
        due_date: Date?,
        invoice_date: Date?,
        invoice_id: String?,
        invoice_total: String?,
        items: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::Item],
        note: String?,
        payment_details: ::Array[EInvoiceAPI::PaymentDetailCreate]?,
        payment_term: String?,
        previous_unpaid_balance: String?,
        purchase_order: String?,
        remittance_address: String?,
        remittance_address_recipient: String?,
        service_address: String?,
        service_address_recipient: String?,
        service_end_date: Date?,
        service_start_date: Date?,
        shipping_address: String?,
        shipping_address_recipient: String?,
        state: EInvoiceAPI::Models::document_state,
        subtotal: String?,
        success: bool,
        tax_code: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code,
        tax_details: ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::TaxDetail]?,
        total_discount: String?,
        total_tax: String?,
        ubl_document: String?,
        vatex: EInvoiceAPI::Models::DocumentCreateFromPdfResponse::vatex?,
        vatex_note: String?,
        vendor_address: String?,
        vendor_address_recipient: String?,
        vendor_email: String?,
        vendor_name: String?,
        vendor_tax_id: String?
      }

      type item =
        {
          allowances: ::Array[EInvoiceAPI::Allowance]?,
          amount: String?,
          charges: ::Array[EInvoiceAPI::Charge]?,
          date: nil,
          description: String?,
          product_code: String?,
          quantity: String?,
          tax: String?,
          tax_rate: String?,
          unit: EInvoiceAPI::Models::unit_of_measure_code?,
          unit_price: String?
        }

      class Item < EInvoiceAPI::Internal::Type::BaseModel
        attr_accessor allowances: ::Array[EInvoiceAPI::Allowance]?

        attr_accessor amount: String?

        attr_accessor charges: ::Array[EInvoiceAPI::Charge]?

        attr_accessor date: nil

        attr_accessor description: String?

        attr_accessor product_code: String?

        attr_accessor quantity: String?

        attr_accessor tax: String?

        attr_accessor tax_rate: String?

        attr_accessor unit: EInvoiceAPI::Models::unit_of_measure_code?

        attr_accessor unit_price: String?

        def initialize: (
          ?allowances: ::Array[EInvoiceAPI::Allowance]?,
          ?amount: String?,
          ?charges: ::Array[EInvoiceAPI::Charge]?,
          ?date: nil,
          ?description: String?,
          ?product_code: String?,
          ?quantity: String?,
          ?tax: String?,
          ?tax_rate: String?,
          ?unit: EInvoiceAPI::Models::unit_of_measure_code?,
          ?unit_price: String?
        ) -> void

        def to_hash: -> {
          allowances: ::Array[EInvoiceAPI::Allowance]?,
          amount: String?,
          charges: ::Array[EInvoiceAPI::Charge]?,
          date: nil,
          description: String?,
          product_code: String?,
          quantity: String?,
          tax: String?,
          tax_rate: String?,
          unit: EInvoiceAPI::Models::unit_of_measure_code?,
          unit_price: String?
        }
      end

      type tax_code = :AE | :E | :S | :Z | :G | :O | :K | :L | :M | :B

      module TaxCode
        extend EInvoiceAPI::Internal::Type::Enum

        AE: :AE
        E: :E
        S: :S
        Z: :Z
        G: :G
        O: :O
        K: :K
        L: :L
        M: :M
        B: :B

        def self?.values: -> ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::tax_code]
      end

      type tax_detail = { amount: String?, rate: String? }

      class TaxDetail < EInvoiceAPI::Internal::Type::BaseModel
        attr_accessor amount: String?

        attr_accessor rate: String?

        def initialize: (?amount: String?, ?rate: String?) -> void

        def to_hash: -> { amount: String?, rate: String? }
      end

      type vatex =
        :"VATEX-EU-79-C"
        | :"VATEX-EU-132"
        | :"VATEX-EU-132-1A"
        | :"VATEX-EU-132-1B"
        | :"VATEX-EU-132-1C"
        | :"VATEX-EU-132-1D"
        | :"VATEX-EU-132-1E"
        | :"VATEX-EU-132-1F"
        | :"VATEX-EU-132-1G"
        | :"VATEX-EU-132-1H"
        | :"VATEX-EU-132-1I"
        | :"VATEX-EU-132-1J"
        | :"VATEX-EU-132-1K"
        | :"VATEX-EU-132-1L"
        | :"VATEX-EU-132-1M"
        | :"VATEX-EU-132-1N"
        | :"VATEX-EU-132-1O"
        | :"VATEX-EU-132-1P"
        | :"VATEX-EU-132-1Q"
        | :"VATEX-EU-143"
        | :"VATEX-EU-143-1A"
        | :"VATEX-EU-143-1B"
        | :"VATEX-EU-143-1C"
        | :"VATEX-EU-143-1D"
        | :"VATEX-EU-143-1E"
        | :"VATEX-EU-143-1F"
        | :"VATEX-EU-143-1FA"
        | :"VATEX-EU-143-1G"
        | :"VATEX-EU-143-1H"
        | :"VATEX-EU-143-1I"
        | :"VATEX-EU-143-1J"
        | :"VATEX-EU-143-1K"
        | :"VATEX-EU-143-1L"
        | :"VATEX-EU-144"
        | :"VATEX-EU-146-1E"
        | :"VATEX-EU-148"
        | :"VATEX-EU-148-A"
        | :"VATEX-EU-148-B"
        | :"VATEX-EU-148-C"
        | :"VATEX-EU-148-D"
        | :"VATEX-EU-148-E"
        | :"VATEX-EU-148-F"
        | :"VATEX-EU-148-G"
        | :"VATEX-EU-151"
        | :"VATEX-EU-151-1A"
        | :"VATEX-EU-151-1AA"
        | :"VATEX-EU-151-1B"
        | :"VATEX-EU-151-1C"
        | :"VATEX-EU-151-1D"
        | :"VATEX-EU-151-1E"
        | :"VATEX-EU-159"
        | :"VATEX-EU-309"
        | :"VATEX-EU-AE"
        | :"VATEX-EU-D"
        | :"VATEX-EU-F"
        | :"VATEX-EU-G"
        | :"VATEX-EU-I"
        | :"VATEX-EU-IC"
        | :"VATEX-EU-O"
        | :"VATEX-EU-J"
        | :"VATEX-FR-FRANCHISE"
        | :"VATEX-FR-CNWVAT"

      module Vatex
        extend EInvoiceAPI::Internal::Type::Enum

        VATEX_EU_79_C: :"VATEX-EU-79-C"
        VATEX_EU_132: :"VATEX-EU-132"
        VATEX_EU_132_1_A: :"VATEX-EU-132-1A"
        VATEX_EU_132_1_B: :"VATEX-EU-132-1B"
        VATEX_EU_132_1_C: :"VATEX-EU-132-1C"
        VATEX_EU_132_1_D: :"VATEX-EU-132-1D"
        VATEX_EU_132_1_E: :"VATEX-EU-132-1E"
        VATEX_EU_132_1_F: :"VATEX-EU-132-1F"
        VATEX_EU_132_1_G: :"VATEX-EU-132-1G"
        VATEX_EU_132_1_H: :"VATEX-EU-132-1H"
        VATEX_EU_132_1_I: :"VATEX-EU-132-1I"
        VATEX_EU_132_1_J: :"VATEX-EU-132-1J"
        VATEX_EU_132_1_K: :"VATEX-EU-132-1K"
        VATEX_EU_132_1_L: :"VATEX-EU-132-1L"
        VATEX_EU_132_1_M: :"VATEX-EU-132-1M"
        VATEX_EU_132_1_N: :"VATEX-EU-132-1N"
        VATEX_EU_132_1_O: :"VATEX-EU-132-1O"
        VATEX_EU_132_1_P: :"VATEX-EU-132-1P"
        VATEX_EU_132_1_Q: :"VATEX-EU-132-1Q"
        VATEX_EU_143: :"VATEX-EU-143"
        VATEX_EU_143_1_A: :"VATEX-EU-143-1A"
        VATEX_EU_143_1_B: :"VATEX-EU-143-1B"
        VATEX_EU_143_1_C: :"VATEX-EU-143-1C"
        VATEX_EU_143_1_D: :"VATEX-EU-143-1D"
        VATEX_EU_143_1_E: :"VATEX-EU-143-1E"
        VATEX_EU_143_1_F: :"VATEX-EU-143-1F"
        VATEX_EU_143_1_FA: :"VATEX-EU-143-1FA"
        VATEX_EU_143_1_G: :"VATEX-EU-143-1G"
        VATEX_EU_143_1_H: :"VATEX-EU-143-1H"
        VATEX_EU_143_1_I: :"VATEX-EU-143-1I"
        VATEX_EU_143_1_J: :"VATEX-EU-143-1J"
        VATEX_EU_143_1_K: :"VATEX-EU-143-1K"
        VATEX_EU_143_1_L: :"VATEX-EU-143-1L"
        VATEX_EU_144: :"VATEX-EU-144"
        VATEX_EU_146_1_E: :"VATEX-EU-146-1E"
        VATEX_EU_148: :"VATEX-EU-148"
        VATEX_EU_148_A: :"VATEX-EU-148-A"
        VATEX_EU_148_B: :"VATEX-EU-148-B"
        VATEX_EU_148_C: :"VATEX-EU-148-C"
        VATEX_EU_148_D: :"VATEX-EU-148-D"
        VATEX_EU_148_E: :"VATEX-EU-148-E"
        VATEX_EU_148_F: :"VATEX-EU-148-F"
        VATEX_EU_148_G: :"VATEX-EU-148-G"
        VATEX_EU_151: :"VATEX-EU-151"
        VATEX_EU_151_1_A: :"VATEX-EU-151-1A"
        VATEX_EU_151_1_AA: :"VATEX-EU-151-1AA"
        VATEX_EU_151_1_B: :"VATEX-EU-151-1B"
        VATEX_EU_151_1_C: :"VATEX-EU-151-1C"
        VATEX_EU_151_1_D: :"VATEX-EU-151-1D"
        VATEX_EU_151_1_E: :"VATEX-EU-151-1E"
        VATEX_EU_159: :"VATEX-EU-159"
        VATEX_EU_309: :"VATEX-EU-309"
        VATEX_EU_AE: :"VATEX-EU-AE"
        VATEX_EU_D: :"VATEX-EU-D"
        VATEX_EU_F: :"VATEX-EU-F"
        VATEX_EU_G: :"VATEX-EU-G"
        VATEX_EU_I: :"VATEX-EU-I"
        VATEX_EU_IC: :"VATEX-EU-IC"
        VATEX_EU_O: :"VATEX-EU-O"
        VATEX_EU_J: :"VATEX-EU-J"
        VATEX_FR_FRANCHISE: :"VATEX-FR-FRANCHISE"
        VATEX_FR_CNWVAT: :"VATEX-FR-CNWVAT"

        def self?.values: -> ::Array[EInvoiceAPI::Models::DocumentCreateFromPdfResponse::vatex]
      end
    end
  end
end
