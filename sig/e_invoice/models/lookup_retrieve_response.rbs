module EInvoice
  module Models
    type lookup_retrieve_response =
      {
        business_card: EInvoice::Models::LookupRetrieveResponse::BusinessCard,
        certificates: ::Array[EInvoice::Certificate],
        dns_info: EInvoice::Models::LookupRetrieveResponse::DNSInfo,
        errors: ::Array[String],
        execution_time_ms: Float,
        query_metadata: EInvoice::Models::LookupRetrieveResponse::QueryMetadata,
        service_metadata: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata,
        status: String
      }

    class LookupRetrieveResponse < EInvoice::Internal::Type::BaseModel
      attr_accessor business_card: EInvoice::Models::LookupRetrieveResponse::BusinessCard

      attr_accessor certificates: ::Array[EInvoice::Certificate]

      attr_accessor dns_info: EInvoice::Models::LookupRetrieveResponse::DNSInfo

      attr_accessor errors: ::Array[String]

      attr_accessor execution_time_ms: Float

      attr_accessor query_metadata: EInvoice::Models::LookupRetrieveResponse::QueryMetadata

      attr_accessor service_metadata: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata

      attr_accessor status: String

      def initialize: (
        business_card: EInvoice::Models::LookupRetrieveResponse::BusinessCard,
        certificates: ::Array[EInvoice::Certificate],
        dns_info: EInvoice::Models::LookupRetrieveResponse::DNSInfo,
        errors: ::Array[String],
        execution_time_ms: Float,
        query_metadata: EInvoice::Models::LookupRetrieveResponse::QueryMetadata,
        service_metadata: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata,
        status: String
      ) -> void

      def to_hash: -> {
        business_card: EInvoice::Models::LookupRetrieveResponse::BusinessCard,
        certificates: ::Array[EInvoice::Certificate],
        dns_info: EInvoice::Models::LookupRetrieveResponse::DNSInfo,
        errors: ::Array[String],
        execution_time_ms: Float,
        query_metadata: EInvoice::Models::LookupRetrieveResponse::QueryMetadata,
        service_metadata: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata,
        status: String
      }

      type business_card =
        {
          entities: ::Array[EInvoice::Models::LookupRetrieveResponse::BusinessCard::Entity],
          query_time_ms: Float,
          status: String,
          error: String?
        }

      class BusinessCard < EInvoice::Internal::Type::BaseModel
        attr_accessor entities: ::Array[EInvoice::Models::LookupRetrieveResponse::BusinessCard::Entity]

        attr_accessor query_time_ms: Float

        attr_accessor status: String

        attr_accessor error: String?

        def initialize: (
          entities: ::Array[EInvoice::Models::LookupRetrieveResponse::BusinessCard::Entity],
          query_time_ms: Float,
          status: String,
          ?error: String?
        ) -> void

        def to_hash: -> {
          entities: ::Array[EInvoice::Models::LookupRetrieveResponse::BusinessCard::Entity],
          query_time_ms: Float,
          status: String,
          error: String?
        }

        type entity =
          {
            additional_information: ::Array[String]?,
            country_code: String?,
            name: String?,
            registration_date: String?
          }

        class Entity < EInvoice::Internal::Type::BaseModel
          attr_accessor additional_information: ::Array[String]?

          attr_accessor country_code: String?

          attr_accessor name: String?

          attr_accessor registration_date: String?

          def initialize: (
            ?additional_information: ::Array[String]?,
            ?country_code: String?,
            ?name: String?,
            ?registration_date: String?
          ) -> void

          def to_hash: -> {
            additional_information: ::Array[String]?,
            country_code: String?,
            name: String?,
            registration_date: String?
          }
        end
      end

      type dns_info =
        {
          dns_records: ::Array[EInvoice::Models::LookupRetrieveResponse::DNSInfo::DNSRecord],
          sml_hostname: String,
          status: String,
          error: String?
        }

      class DNSInfo < EInvoice::Internal::Type::BaseModel
        attr_accessor dns_records: ::Array[EInvoice::Models::LookupRetrieveResponse::DNSInfo::DNSRecord]

        attr_accessor sml_hostname: String

        attr_accessor status: String

        attr_accessor error: String?

        def initialize: (
          dns_records: ::Array[EInvoice::Models::LookupRetrieveResponse::DNSInfo::DNSRecord],
          sml_hostname: String,
          status: String,
          ?error: String?
        ) -> void

        def to_hash: -> {
          dns_records: ::Array[EInvoice::Models::LookupRetrieveResponse::DNSInfo::DNSRecord],
          sml_hostname: String,
          status: String,
          error: String?
        }

        type dns_record = { ip: String }

        class DNSRecord < EInvoice::Internal::Type::BaseModel
          attr_accessor ip: String

          def initialize: (ip: String) -> void

          def to_hash: -> { ip: String }
        end
      end

      type query_metadata =
        {
          identifier_scheme: String,
          identifier_value: String,
          sml_domain: String,
          timestamp: String,
          version: String
        }

      class QueryMetadata < EInvoice::Internal::Type::BaseModel
        attr_accessor identifier_scheme: String

        attr_accessor identifier_value: String

        attr_accessor sml_domain: String

        attr_accessor timestamp: String

        attr_accessor version: String

        def initialize: (
          identifier_scheme: String,
          identifier_value: String,
          sml_domain: String,
          timestamp: String,
          version: String
        ) -> void

        def to_hash: -> {
          identifier_scheme: String,
          identifier_value: String,
          sml_domain: String,
          timestamp: String,
          version: String
        }
      end

      type service_metadata =
        {
          endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint],
          query_time_ms: Float,
          status: String,
          error: String?
        }

      class ServiceMetadata < EInvoice::Internal::Type::BaseModel
        attr_accessor endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint]

        attr_accessor query_time_ms: Float

        attr_accessor status: String

        attr_accessor error: String?

        def initialize: (
          endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint],
          query_time_ms: Float,
          status: String,
          ?error: String?
        ) -> void

        def to_hash: -> {
          endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint],
          query_time_ms: Float,
          status: String,
          error: String?
        }

        type endpoint =
          {
            document_types: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::DocumentType],
            status: String,
            url: String,
            error: String?,
            processes: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process]?
          }

        class Endpoint < EInvoice::Internal::Type::BaseModel
          attr_accessor document_types: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::DocumentType]

          attr_accessor status: String

          attr_accessor url: String

          attr_accessor error: String?

          attr_accessor processes: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process]?

          def initialize: (
            document_types: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::DocumentType],
            status: String,
            url: String,
            ?error: String?,
            ?processes: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process]?
          ) -> void

          def to_hash: -> {
            document_types: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::DocumentType],
            status: String,
            url: String,
            error: String?,
            processes: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process]?
          }

          type document_type = { scheme: String, value: String }

          class DocumentType < EInvoice::Internal::Type::BaseModel
            attr_accessor scheme: String

            attr_accessor value: String

            def initialize: (scheme: String, value: String) -> void

            def to_hash: -> { scheme: String, value: String }
          end

          type process =
            {
              endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::Endpoint],
              process_id: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::ProcessID
            }

          class Process < EInvoice::Internal::Type::BaseModel
            attr_accessor endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::Endpoint]

            attr_accessor process_id: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::ProcessID

            def initialize: (
              endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::Endpoint],
              process_id: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::ProcessID
            ) -> void

            def to_hash: -> {
              endpoints: ::Array[EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::Endpoint],
              process_id: EInvoice::Models::LookupRetrieveResponse::ServiceMetadata::Endpoint::Process::ProcessID
            }

            type endpoint =
              {
                address: String,
                transport_profile: String,
                certificate: EInvoice::Certificate?,
                service_activation_date: String?,
                service_description: String?,
                service_expiration_date: String?,
                technical_contact_url: String?,
                technical_information_url: String?
              }

            class Endpoint < EInvoice::Internal::Type::BaseModel
              attr_accessor address: String

              attr_accessor transport_profile: String

              attr_accessor certificate: EInvoice::Certificate?

              attr_accessor service_activation_date: String?

              attr_accessor service_description: String?

              attr_accessor service_expiration_date: String?

              attr_accessor technical_contact_url: String?

              attr_accessor technical_information_url: String?

              def initialize: (
                address: String,
                transport_profile: String,
                ?certificate: EInvoice::Certificate?,
                ?service_activation_date: String?,
                ?service_description: String?,
                ?service_expiration_date: String?,
                ?technical_contact_url: String?,
                ?technical_information_url: String?
              ) -> void

              def to_hash: -> {
                address: String,
                transport_profile: String,
                certificate: EInvoice::Certificate?,
                service_activation_date: String?,
                service_description: String?,
                service_expiration_date: String?,
                technical_contact_url: String?,
                technical_information_url: String?
              }
            end

            type process_id = { scheme: String, value: String }

            class ProcessID < EInvoice::Internal::Type::BaseModel
              attr_accessor scheme: String

              attr_accessor value: String

              def initialize: (scheme: String, value: String) -> void

              def to_hash: -> { scheme: String, value: String }
            end
          end
        end
      end
    end
  end
end
