module EInvoice
  module Models
    type validate_validate_peppol_id_response =
      {
        business_card: EInvoice::Models::ValidateValidatePeppolIDResponse::BusinessCard?,
        business_card_valid: bool,
        dns_valid: bool,
        is_valid: bool,
        supported_document_types: ::Array[String]
      }

    class ValidateValidatePeppolIDResponse < EInvoice::Internal::Type::BaseModel
      attr_accessor business_card: EInvoice::Models::ValidateValidatePeppolIDResponse::BusinessCard?

      attr_accessor business_card_valid: bool

      attr_accessor dns_valid: bool

      attr_accessor is_valid: bool

      attr_reader supported_document_types: ::Array[String]?

      def supported_document_types=: (::Array[String]) -> ::Array[String]

      def initialize: (
        business_card: EInvoice::Models::ValidateValidatePeppolIDResponse::BusinessCard?,
        business_card_valid: bool,
        dns_valid: bool,
        is_valid: bool,
        ?supported_document_types: ::Array[String]
      ) -> void

      def to_hash: -> {
        business_card: EInvoice::Models::ValidateValidatePeppolIDResponse::BusinessCard?,
        business_card_valid: bool,
        dns_valid: bool,
        is_valid: bool,
        supported_document_types: ::Array[String]
      }

      type business_card =
        { country_code: String?, name: String?, registration_date: Date? }

      class BusinessCard < EInvoice::Internal::Type::BaseModel
        attr_accessor country_code: String?

        attr_accessor name: String?

        attr_accessor registration_date: Date?

        def initialize: (
          ?country_code: String?,
          ?name: String?,
          ?registration_date: Date?
        ) -> void

        def to_hash: -> {
          country_code: String?,
          name: String?,
          registration_date: Date?
        }
      end
    end
  end
end
